<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.doubleSelection.doubleSelection.mapper.StudentMapper">
    
    <resultMap type="Student" id="StudentResult">
        <result property="studentId"    column="student_id"    />
        <result property="name"    column="name"    />
        <result property="email"    column="email"    />
        <result property="password"    column="password"    />
        <result property="major"    column="major"    />
        <result property="interests"    column="interests"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectStudentVo">
        select student_id, name, email, password, major, interests, create_time, update_time from student
    </sql>

    <select id="selectStudentList" parameterType="Student" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="major != null  and major != ''"> and major = #{major}</if>
            <if test="interests != null  and interests != ''"> and interests like concat('%', #{interests}, '%')</if>
        </where>
    </select>
    
    <select id="selectStudentByStudentId" parameterType="Long" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        where student_id = #{studentId}
    </select>

    <insert id="insertStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="studentId">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentId != null">student_id,</if>
            <if test="name != null and name != ''">name,</if>
            <if test="email != null and email != ''">email,</if>
            <if test="password != null and password != ''">password,</if>
            <if test="major != null">major,</if>
            <if test="interests != null">interests,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentId != null and studentId != ''">#{studentId},</if>
            <if test="name != null and name != ''">#{name},</if>
            <if test="email != null and email != ''">#{email},</if>
            <if test="password != null and password != ''">#{password},</if>
            <if test="major != null">#{major},</if>
            <if test="interests != null">#{interests},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateStudent" parameterType="Student">
        update student
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="email != null and email != ''">email = #{email},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="major != null">major = #{major},</if>
            <if test="interests != null">interests = #{interests},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where student_id = #{studentId}
    </update>

    <delete id="deleteStudentByStudentId" parameterType="Long">
        delete from student where student_id = #{studentId}
    </delete>

    <delete id="deleteStudentByStudentIds" parameterType="String">
        delete from student where student_id in 
        <foreach item="studentId" collection="array" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </delete>
    <delete id="deleteAllStudent">
        delete from student
    </delete>
</mapper>